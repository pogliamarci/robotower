/***************************************************************************
                          wanter_eng.h  -  description
                             -------------------
    begin                : Wed Sep 13 2000
    copyright            : (C) 2000 by Halva Giovanni & Giacomo
    email                : invehalv@airlab.elet.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#include "interf_obj.h"
#include "can_doer.h"

//SM include
#include "behavior_eng.h"

#ifdef DMALLOC
#include <dmalloc.h>
#endif


/**
* Class implementing the father class for all the type of wanter and defining the characteristic.
* @short definition of a wanter
*/

class wanter
{
 public:
  
  /**
   * Constructor: it return an empty wanter.
   */   
  wanter();

  /**
   * Copy constructor generated by the UML software used to build Brian. It return a copy of the wanter.
   */
  wanter(const wanter &right);

  /**	
   * Destructor destroy a wanter.
   */
  virtual ~wanter();

  /**	
   * Return the weight to give to the behaviors, it is virtual because the method depends by the type wanter.
   * @return a weight list
   * @param predicates is the list of computed predicates
   */
  virtual weight_want_list * what_do_you_want (predicate_list * predicates)=0;
  virtual weight_want_list * what_do_you_want (predicate_list * predicates, can_do_filter *acandofilter)=0;

  
};


/**
* Class implementing a wanter which bases its weight on predicates computed by preacher.
* @short compute weight 
*/

class predicate_wanter : public wanter
{
 public:
  /**
   * Constructor: return a predicate wanter with all the want loaded
   * @param afilename is the file to be read
   */ 
  predicate_wanter(char * afilename);

  /**
   * Copy constructor generated by the UML software used to build Brian. It return a copy of the predicate wanter.
   */
  predicate_wanter(const predicate_wanter &right);

  /**	
   * Destructor destroy a wanter and all the things contained.
   */
  virtual ~predicate_wanter();

  /**	
   * Return the weight to give to the behaviors basing its decisions on predicates
   * @return a weight list
   * @param predicates is the list of computed predicates
   */
  virtual weight_want_list * what_do_you_want (predicate_list * predicates);
  virtual weight_want_list * what_do_you_want (predicate_list * predicates, can_do_filter *acandofilter);

  
 private:
  cando_tree_map * wanttree;  

};
