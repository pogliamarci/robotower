/***************************************************************************
                          singleton.h  -  description
                             -------------------
    begin                : Wed Sep 13 2000
    copyright            : (C) 2000 by Halva Giovanni & Giacomo
    email                : invehalv@airlab.elet.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/



#ifndef singleton_h
#define singleton_h 1

#include "fuzzy_set.h"

#ifdef DMALLOC

#include <dmalloc.h>

#endif


/**
* This class inherits from fuzzy_set and specifies it to be a singleton.
* @short Class implementing the concept of singleton fuzzy set.
*/

class singleton : public fuzzy_set  //## Inherits: singleton_inheritance%382BDE2700D2
{
 public:
  /**
   * Constructor generated by the UML software used to build Brian. It return an empty singleton.
   */
  singleton();

  /**
   * Copy constructor generated by the UML software used to build Brian. It return a copy of the fuzzy set passed.
   */   
  singleton(const singleton &right);

  /**	
   * Constructor that build a singleton.
   * @param alabel is the label given to the the fuzzy set
   * @param aa is the first point of the fuzzy set
   */
  singleton (char* alabel, float aa);

  /**	
   * Destructor destroy a fuzzy set and free its data.
   */
  virtual ~singleton();

  /**	
   * Return the point of the fuzzy set.
   * @return the value of the point
   */
  float get_a ();
  /**
   * Modify the value of the point of the fuzzy set.
   * @param value the new value of the point
   */  
  void set_a (float value);

  /**	
   * Return the membership of data to the fuzzy set
   * @see fuzzy_set
   * @return the membership value
   * @param avalue is a crisp data
   */
 float get_membership_value(float avalue);

 private: 
  // Data Members for Class Attributes

  float a;
};

// Class singleton 

inline float singleton::get_a ()
{
  return a;
}

inline void singleton::set_a (float value)
{
  a = value;
}


#endif
