"""autogenerated by genmsg_py from Results.msg. Do not edit."""
import roslib.message
import struct


class Results(roslib.message.Message):
  _md5sum = "5fb63429aaf2fdd1f1810340dee4cad4"
  _type = "Vision/Results"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool towerFound
int32  towerPos
int32 towerBlobHeight
int32 towerSize
bool factoryFound
int32  factoryPos

"""
  __slots__ = ['towerFound','towerPos','towerBlobHeight','towerSize','factoryFound','factoryPos']
  _slot_types = ['bool','int32','int32','int32','bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       towerFound,towerPos,towerBlobHeight,towerSize,factoryFound,factoryPos
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Results, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.towerFound is None:
        self.towerFound = False
      if self.towerPos is None:
        self.towerPos = 0
      if self.towerBlobHeight is None:
        self.towerBlobHeight = 0
      if self.towerSize is None:
        self.towerSize = 0
      if self.factoryFound is None:
        self.factoryFound = False
      if self.factoryPos is None:
        self.factoryPos = 0
    else:
      self.towerFound = False
      self.towerPos = 0
      self.towerBlobHeight = 0
      self.towerSize = 0
      self.factoryFound = False
      self.factoryPos = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_B3iBi.pack(_x.towerFound, _x.towerPos, _x.towerBlobHeight, _x.towerSize, _x.factoryFound, _x.factoryPos))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.towerFound, _x.towerPos, _x.towerBlobHeight, _x.towerSize, _x.factoryFound, _x.factoryPos,) = _struct_B3iBi.unpack(str[start:end])
      self.towerFound = bool(self.towerFound)
      self.factoryFound = bool(self.factoryFound)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_B3iBi.pack(_x.towerFound, _x.towerPos, _x.towerBlobHeight, _x.towerSize, _x.factoryFound, _x.factoryPos))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.towerFound, _x.towerPos, _x.towerBlobHeight, _x.towerSize, _x.factoryFound, _x.factoryPos,) = _struct_B3iBi.unpack(str[start:end])
      self.towerFound = bool(self.towerFound)
      self.factoryFound = bool(self.factoryFound)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B3iBi = struct.Struct("<B3iBi")
