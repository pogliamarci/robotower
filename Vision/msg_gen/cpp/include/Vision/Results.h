/* Auto-generated by genmsg_cpp for file /home/marcello/robotower/Vision/msg/Results.msg */
#ifndef VISION_MESSAGE_RESULTS_H
#define VISION_MESSAGE_RESULTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Vision
{
template <class ContainerAllocator>
struct Results_ {
  typedef Results_<ContainerAllocator> Type;

  Results_()
  : towerFound(false)
  , towerPos(0)
  {
  }

  Results_(const ContainerAllocator& _alloc)
  : towerFound(false)
  , towerPos(0)
  {
  }

  typedef uint8_t _towerFound_type;
  uint8_t towerFound;

  typedef int32_t _towerPos_type;
  int32_t towerPos;


private:
  static const char* __s_getDataType_() { return "Vision/Results"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1a16ba0649349930ae4825fafd88f261"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool towerFound\n\
int32  towerPos\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, towerFound);
    ros::serialization::serialize(stream, towerPos);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, towerFound);
    ros::serialization::deserialize(stream, towerPos);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(towerFound);
    size += ros::serialization::serializationLength(towerPos);
    return size;
  }

  typedef boost::shared_ptr< ::Vision::Results_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Vision::Results_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Results
typedef  ::Vision::Results_<std::allocator<void> > Results;

typedef boost::shared_ptr< ::Vision::Results> ResultsPtr;
typedef boost::shared_ptr< ::Vision::Results const> ResultsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Vision::Results_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Vision::Results_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Vision

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Vision::Results_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Vision::Results_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Vision::Results_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1a16ba0649349930ae4825fafd88f261";
  }

  static const char* value(const  ::Vision::Results_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1a16ba0649349930ULL;
  static const uint64_t static_value2 = 0xae4825fafd88f261ULL;
};

template<class ContainerAllocator>
struct DataType< ::Vision::Results_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Vision/Results";
  }

  static const char* value(const  ::Vision::Results_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Vision::Results_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool towerFound\n\
int32  towerPos\n\
\n\
";
  }

  static const char* value(const  ::Vision::Results_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Vision::Results_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Vision::Results_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.towerFound);
    stream.next(m.towerPos);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Results_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Vision::Results_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Vision::Results_<ContainerAllocator> & v) 
  {
    s << indent << "towerFound: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.towerFound);
    s << indent << "towerPos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.towerPos);
  }
};


} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_RESULTS_H

