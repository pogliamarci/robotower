/* Auto-generated by genmsg_cpp for file /home/marcello/robotower/sonar/srv/Led.srv */
#ifndef SONAR_SERVICE_LED_H
#define SONAR_SERVICE_LED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace sonar
{
template <class ContainerAllocator>
struct LedRequest_ {
  typedef LedRequest_<ContainerAllocator> Type;

  LedRequest_()
  : editGreen(false)
  , editYellow(false)
  , editRed(false)
  , greenIsOn(false)
  , redNumOn(0)
  , yellowIsOn()
  {
    yellowIsOn.assign(false);
  }

  LedRequest_(const ContainerAllocator& _alloc)
  : editGreen(false)
  , editYellow(false)
  , editRed(false)
  , greenIsOn(false)
  , redNumOn(0)
  , yellowIsOn()
  {
    yellowIsOn.assign(false);
  }

  typedef uint8_t _editGreen_type;
  uint8_t editGreen;

  typedef uint8_t _editYellow_type;
  uint8_t editYellow;

  typedef uint8_t _editRed_type;
  uint8_t editRed;

  typedef uint8_t _greenIsOn_type;
  uint8_t greenIsOn;

  typedef uint8_t _redNumOn_type;
  uint8_t redNumOn;

  typedef boost::array<uint8_t, 4>  _yellowIsOn_type;
  boost::array<uint8_t, 4>  yellowIsOn;


  ROS_DEPRECATED uint32_t get_yellowIsOn_size() const { return (uint32_t)yellowIsOn.size(); }
private:
  static const char* __s_getDataType_() { return "sonar/LedRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "616fbe05e64267fd9ee248014f1d1658"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "123e812292460e49a24080052eae9c17"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool editGreen\n\
bool editYellow\n\
bool editRed\n\
bool greenIsOn\n\
uint8 redNumOn\n\
bool[4] yellowIsOn\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, editGreen);
    ros::serialization::serialize(stream, editYellow);
    ros::serialization::serialize(stream, editRed);
    ros::serialization::serialize(stream, greenIsOn);
    ros::serialization::serialize(stream, redNumOn);
    ros::serialization::serialize(stream, yellowIsOn);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, editGreen);
    ros::serialization::deserialize(stream, editYellow);
    ros::serialization::deserialize(stream, editRed);
    ros::serialization::deserialize(stream, greenIsOn);
    ros::serialization::deserialize(stream, redNumOn);
    ros::serialization::deserialize(stream, yellowIsOn);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(editGreen);
    size += ros::serialization::serializationLength(editYellow);
    size += ros::serialization::serializationLength(editRed);
    size += ros::serialization::serializationLength(greenIsOn);
    size += ros::serialization::serializationLength(redNumOn);
    size += ros::serialization::serializationLength(yellowIsOn);
    return size;
  }

  typedef boost::shared_ptr< ::sonar::LedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sonar::LedRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LedRequest
typedef  ::sonar::LedRequest_<std::allocator<void> > LedRequest;

typedef boost::shared_ptr< ::sonar::LedRequest> LedRequestPtr;
typedef boost::shared_ptr< ::sonar::LedRequest const> LedRequestConstPtr;


template <class ContainerAllocator>
struct LedResponse_ {
  typedef LedResponse_<ContainerAllocator> Type;

  LedResponse_()
  : requestSuccessful(false)
  {
  }

  LedResponse_(const ContainerAllocator& _alloc)
  : requestSuccessful(false)
  {
  }

  typedef uint8_t _requestSuccessful_type;
  uint8_t requestSuccessful;


private:
  static const char* __s_getDataType_() { return "sonar/LedResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "6b6d4c3b5d9d236dae096b76debe50d5"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "123e812292460e49a24080052eae9c17"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool requestSuccessful\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, requestSuccessful);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, requestSuccessful);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(requestSuccessful);
    return size;
  }

  typedef boost::shared_ptr< ::sonar::LedResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sonar::LedResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LedResponse
typedef  ::sonar::LedResponse_<std::allocator<void> > LedResponse;

typedef boost::shared_ptr< ::sonar::LedResponse> LedResponsePtr;
typedef boost::shared_ptr< ::sonar::LedResponse const> LedResponseConstPtr;

struct Led
{

typedef LedRequest Request;
typedef LedResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Led
} // namespace sonar

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sonar::LedRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sonar::LedRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sonar::LedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "616fbe05e64267fd9ee248014f1d1658";
  }

  static const char* value(const  ::sonar::LedRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x616fbe05e64267fdULL;
  static const uint64_t static_value2 = 0x9ee248014f1d1658ULL;
};

template<class ContainerAllocator>
struct DataType< ::sonar::LedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sonar/LedRequest";
  }

  static const char* value(const  ::sonar::LedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sonar::LedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool editGreen\n\
bool editYellow\n\
bool editRed\n\
bool greenIsOn\n\
uint8 redNumOn\n\
bool[4] yellowIsOn\n\
\n\
";
  }

  static const char* value(const  ::sonar::LedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sonar::LedRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sonar::LedResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sonar::LedResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sonar::LedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6b6d4c3b5d9d236dae096b76debe50d5";
  }

  static const char* value(const  ::sonar::LedResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6b6d4c3b5d9d236dULL;
  static const uint64_t static_value2 = 0xae096b76debe50d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::sonar::LedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sonar/LedResponse";
  }

  static const char* value(const  ::sonar::LedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sonar::LedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool requestSuccessful\n\
\n\
\n\
";
  }

  static const char* value(const  ::sonar::LedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sonar::LedResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sonar::LedRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.editGreen);
    stream.next(m.editYellow);
    stream.next(m.editRed);
    stream.next(m.greenIsOn);
    stream.next(m.redNumOn);
    stream.next(m.yellowIsOn);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LedRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sonar::LedResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.requestSuccessful);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LedResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<sonar::Led> {
  static const char* value() 
  {
    return "123e812292460e49a24080052eae9c17";
  }

  static const char* value(const sonar::Led&) { return value(); } 
};

template<>
struct DataType<sonar::Led> {
  static const char* value() 
  {
    return "sonar/Led";
  }

  static const char* value(const sonar::Led&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sonar::LedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "123e812292460e49a24080052eae9c17";
  }

  static const char* value(const sonar::LedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sonar::LedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sonar/Led";
  }

  static const char* value(const sonar::LedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sonar::LedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "123e812292460e49a24080052eae9c17";
  }

  static const char* value(const sonar::LedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sonar::LedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sonar/Led";
  }

  static const char* value(const sonar::LedResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SONAR_SERVICE_LED_H

