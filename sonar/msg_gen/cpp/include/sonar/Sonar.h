/* Auto-generated by genmsg_cpp for file /home/marcello/ros_workspace/sonar/msg/Sonar.msg */
#ifndef SONAR_MESSAGE_SONAR_H
#define SONAR_MESSAGE_SONAR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace sonar
{
template <class ContainerAllocator>
struct Sonar_ {
  typedef Sonar_<ContainerAllocator> Type;

  Sonar_()
  : north(0.0)
  , south(0.0)
  , east(0.0)
  , west(0.0)
  {
  }

  Sonar_(const ContainerAllocator& _alloc)
  : north(0.0)
  , south(0.0)
  , east(0.0)
  , west(0.0)
  {
  }

  typedef float _north_type;
  float north;

  typedef float _south_type;
  float south;

  typedef float _east_type;
  float east;

  typedef float _west_type;
  float west;


private:
  static const char* __s_getDataType_() { return "sonar/Sonar"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "bfb04bad3590e564c12fae1e3d9f10d9"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 north\n\
float32 south\n\
float32 east\n\
float32 west\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, north);
    ros::serialization::serialize(stream, south);
    ros::serialization::serialize(stream, east);
    ros::serialization::serialize(stream, west);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, north);
    ros::serialization::deserialize(stream, south);
    ros::serialization::deserialize(stream, east);
    ros::serialization::deserialize(stream, west);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(north);
    size += ros::serialization::serializationLength(south);
    size += ros::serialization::serializationLength(east);
    size += ros::serialization::serializationLength(west);
    return size;
  }

  typedef boost::shared_ptr< ::sonar::Sonar_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sonar::Sonar_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Sonar
typedef  ::sonar::Sonar_<std::allocator<void> > Sonar;

typedef boost::shared_ptr< ::sonar::Sonar> SonarPtr;
typedef boost::shared_ptr< ::sonar::Sonar const> SonarConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sonar::Sonar_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sonar::Sonar_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sonar

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sonar::Sonar_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sonar::Sonar_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sonar::Sonar_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bfb04bad3590e564c12fae1e3d9f10d9";
  }

  static const char* value(const  ::sonar::Sonar_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbfb04bad3590e564ULL;
  static const uint64_t static_value2 = 0xc12fae1e3d9f10d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::sonar::Sonar_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sonar/Sonar";
  }

  static const char* value(const  ::sonar::Sonar_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sonar::Sonar_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 north\n\
float32 south\n\
float32 east\n\
float32 west\n\
\n\
";
  }

  static const char* value(const  ::sonar::Sonar_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sonar::Sonar_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sonar::Sonar_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.north);
    stream.next(m.south);
    stream.next(m.east);
    stream.next(m.west);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Sonar_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sonar::Sonar_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sonar::Sonar_<ContainerAllocator> & v) 
  {
    s << indent << "north: ";
    Printer<float>::stream(s, indent + "  ", v.north);
    s << indent << "south: ";
    Printer<float>::stream(s, indent + "  ", v.south);
    s << indent << "east: ";
    Printer<float>::stream(s, indent + "  ", v.east);
    s << indent << "west: ";
    Printer<float>::stream(s, indent + "  ", v.west);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SONAR_MESSAGE_SONAR_H

