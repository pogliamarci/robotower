/***************************************************************************
                          preacher.h  -  description
                             -------------------
    begin                : Wed Sep 13 2000
    copyright            : (C) 2000 by Halva Giovanni & Giacomo
    email                : invehalv@airlab.elet.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

//	Description: This module at strart up create the
//	Predicate tree and its list by the predicate parser.
//	Durind the runtime  evalue the predicate tree by the
//	fuzzy data list.
//
//--------------------------------------------------------------------------

#ifndef preacher_h
#define preacher_h 1

// Engine_Objects
#include "engine_objects.h"
// stdio.h
#include <stdio.h>
// string
#include <string.h>


#ifdef DMALLOC
#include <dmalloc.h>
#endif


/**
* Class implementing a predicates list and the evalue method. 
* @short Collection of predicates
*/

class prd_tree_map : public aggr_tree_multimap  
{

 public:
  /**
   * Constructor: it return an empty predicate tree map.
   */  
  prd_tree_map();
      
  /**
   * Copy constructor generated by the UML software used to build Brian. It return a copy of the predicate tree map.
   */
  prd_tree_map(const prd_tree_map &right);

  /**	
   * Destructor: destroy a predicate tree map freeing all the predicate tree that contains.
   */
  virtual ~prd_tree_map();

  /**	
   * Method that, given a fuzzy data list, compute all the predicates in the list.
   * @return a list of evalueted predicates
   * @param fuzzy_lst is a fuzzy data list
   */
  virtual predicate_list * evalue (fuzzy_data_list * fuzzy_lst);

};


/**
 * Class implementing the predicate-evaluator module.
 * @short Predicate evaluator
 */
class preacher
{
 public:
    /**
     * Constructor. Returns an empty preacher.
     */
    preacher();

    /**
     * Constructor. It will use the given parser to build the predicates to use.
     * @param apredicateparser Pointer to predicate parser to use. It will be delete by Preacher
     */
    preacher(aggr_tree_parser * apredicateparser);
    
    /**
     * Destructor.
     */
    virtual ~preacher();

    /**
     * It evalues predicates with data given by fuzzy data list.
     * @return List of predicates
     * @param fuzzy_lst Fuzzy data to use.
     */
    virtual predicate_list *  preach(fuzzy_data_list * fuzzy_lst);
    
 private:
    aggr_tree_parser * pred_parser;
    prd_tree_map * predicates;
};

#endif

