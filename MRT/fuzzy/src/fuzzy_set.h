/***************************************************************************
                          fuzzy_sets.h  -  description
                             -------------------
    begin                : Wed Sep 13 2000
    copyright            : (C) 2000 by Halva Giovanni & Giacomo
    email                : invehalv@airlab.elet.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef fuzzy_sets_h
#define fuzzy_sets_h 1

#include <malloc.h>
#include <stl.h>
#include <string.h>


#ifdef DMALLOC
#include <dmalloc.h>
#endif

/**      
* The fuzzy set class is the father class of all the fuzzy sets implemented in Brian. It implements the common characteristics of all the fuzzy sets. 
* @short Abstract class implementing the concept of fuzzy set.
*/

class fuzzy_set 
{
 public:
  /**
   * Constructor generated by the UML software used to build Brian. It return an empty fuzzy set.
   */
  fuzzy_set();

  /**
   * Copy constructor generated by the UML software used to build Brian. It return a copy of the fuzzy set passed.
   */
  fuzzy_set(const fuzzy_set &right);

  /**	
   * Constructor that build a fuzzy set whose name is label.
   * @param alabel is the label given to the the fuzzy set.
   */
  fuzzy_set (char* alabel);

  /**	
   * Destructor destroy a fuzzy set and free the label.
   */
  virtual ~fuzzy_set();

  /**	
   * Return the membership of data to the fuzzy set, it is virtual because the method depends by the type of fuzzy set.
   * @return the membership value
   * @param avalue is a crisp data
   */
  virtual const float get_membership_value(float avalue)=0;

  /**	
   * Return the name of the fuzzy set.
   * @return a name
   */
  const char* get_label ();

  /**
   * Modify the name of the fuzzy set.
   * @param value the new name
   */
  void set_label (char* value);

 private:
  // Data Members for Class Attributes
  
  char* label;
};

//## Get and Set Operations for Class Attributes (inline)

inline const char* fuzzy_set::get_label ()
{
  return label;
}

inline void fuzzy_set::set_label (char* value)
{
  if (label!=NULL) free (label);
  label=(char *) malloc(strlen(label)+1);
  strcpy(label,value);
}

#endif
