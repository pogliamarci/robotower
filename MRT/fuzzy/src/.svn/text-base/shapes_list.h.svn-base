/***************************************************************************
                          shape_list.h  -  description
                             -------------------
    begin                : Wed Sep 13 2000
    copyright            : (C) 2000 by Halva Giovanni & Giacomo
    email                : invehalv@airlab.elet.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/



#ifndef shapes_list_h
#define shapes_list_h 1

#ifdef DMALLOC

#include <dmalloc.h>

#endif

#include "shape_multimap.h"

/**
* It is a multimap that collect the shapes used to fuzzyfy and defuzzyfy
* @short Collection of shapes
*/

class shapes_list : public shape_multimap 
{
 public:
  /**
   * Constructor generated by the UML software used to build Brian. It return an empty shape list.
   */
  shapes_list();

  /**
   * Copy constructor generated by the UML software used to build Brian. It return a copy of the shape list.
   */
  shapes_list(const shapes_list &right);

  /**	
   * Destructor destroy a shape list freeing all the shape self-contained.
   */
  ~shapes_list();


  /**
   * Method that given the predicate's name return the shape list related. It point to the original shape so it must not be destroyed.
   * @param shapename is the name of the shape
   * @return a pointer to a shape
   */
  shape * get_shape (const char* shapename);

  /**
   * Add a shape to the shape list
   * @param ashape is the pointer to the shape to add
   */
  void add_shape (shape *ashape);
};

#endif
