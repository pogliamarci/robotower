/***************************************************************************
                          shape.h  -  description
                             -------------------
    begin                : Wed Sep 13 2000
    copyright            : (C) 2000 by Halva Giovanni & Giacomo
    email                : invehalv@airlab.elet.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/


#ifndef shape_h
#define shape_h 1

#ifdef DMALLOC

#include <dmalloc.h>

#endif

#include "fuzzy_set_multimap.h"

/**
* Class that stores the fuzzy sets corresponding to a shape
* @short Collection of fuzzy sets
*/

class shape : public fuzz_set_multimap  //## Inherits: shape inheritance%3815C7A40172
{
 public:
  /**
   * Constructor generated by the UML software used to build Brian. It return an empty shape.
   */
  shape();

  /**
   * Copy constructor generated by the UML software used to build Brian. It return a copy of the shape.
   */
  shape(const shape &right);

  /*
   * Constructor that build a shape whose name is alabel
   * @param alabel is the name of the new shape
   */
  shape (const char* alabel);

  /**	
   * Destructor destroy a shape: free the name and all the fuzzy set self-contained.
   */
  ~shape();

  /**
   * Method that given a label return the pointer to the fuzzy set related. It point to the original fuzzy set so it must not be destroyed.
   * @param alabel is the label of the fuzzy set
   * @return a pointer to fuzzy set
   */ 
   fuzzy_set * get_set (const char* label);

   /**
    * Add a fuzzy set to the shape.
    * @param aset is the pointer to the fuzzy set to add
    */
   void add_set (fuzzy_set *aset);

   /**
    * Return the name of the shape
    * @return the name of the shape
    */
   const char* get_label ();
   /**
    * Set the name of the shape
    * @param value is the new name for the shape
    */
   void set_label (const char* value);

 private:
   // Data Members for Class Attributes

   char* label;
};

//## Get and Set Operations for Class Attributes (inline)

inline const char* shape::get_label ()
{
  char *ch=(char *) malloc(strlen(label)+1);
  strcpy(ch,label);
  return ch;
}

inline void shape::set_label (const char* value)
{
  if (label!=NULL) free(label);
  label=(char *) malloc (strlen(value)+1);
  strcpy(label,value);
}


#endif
