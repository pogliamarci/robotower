/***************************************************************************
                          can_doer.h  -  description
                             -------------------
    begin                : Wed Sep 13 2000
    copyright            : (C) 2000 by Halva Giovanni & Giacomo
    email                : invehalv@airlab.elet.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

//	Description: This module at strart up create the
//	Cando tree and its list by the cando parser.
//	At the runtime  evalue the cando tree by the
//	predicate list.
//
//--------------------------------------------------------------------------

/* ======================== ATTENZIONE !!!! =======================

   I file di configurazione devono terminare con una linea scritta
   secondo la grammatica e non con un newline
   NON ADATE A CAPO DOPO L'ULTIMA RIGA!!!!!

   ================================================================ */


#ifndef can_doer_h
#define can_doer_h 1

// Engine_Objects
#include "engine_objects.h"
// stdio.h
#include <stdio.h>
// string
#include <string.h>

#include <getFuzzy.h>

#ifdef DMALLOC
#include <dmalloc.h>
#endif

/**
* Class implementing a can do list and the evalue method. 
* @short Collection of candoes
*/

class cando_tree_map : public aggr_tree_multimap
{
 public:
  /**
   * Constructor: it return an empty cando tree map.
   */   
  cando_tree_map();
  
  /**
   * Copy constructor generated by the UML software used to build Brian. It return a copy of the cando tree map.
   */
  cando_tree_map(const cando_tree_map &right);

  /**	
   * Destructor: destroy a cando tree map destroing also all the predicate tree that contains.
   */
  virtual ~cando_tree_map();
  
  /**	
   * Method that, given a predicate, compute all the candoes in the list.
   * @return a list of evalueted candoes
   * @param fuzzy_lst is a predicate list
   */  
  virtual predicate_list * evalue (predicate_list * prd_lst);

};


/**
 * Class implementing the cando-evaluator module.
 * @short cando evaluator
 */
class candoer
{
 public:
    /**
     * Constructor. Returns an empty candoer.
     */
    candoer();

    /**
     * Constructor. It will use the given parser to build the candoes to use.
     * @param acandoparser Pointer to cando parser to use. It will be delete by candoer.
     */
    candoer(aggr_tree_parser * acandoparser);
    
    /**
     * Destructor.
     */
    virtual ~candoer();

    /**
     * It evalues candoes with given predicates.
     * @return List of cando values
     * @param predicates Predicates to use for evaluation.
     */
    virtual predicate_list * can_i(predicate_list * predicates);
    
 private:
    aggr_tree_parser * cando_parser;
    cando_tree_map * cando;
};


#endif
