/***************************************************************************
                          rectangle.h  -  description
                             -------------------
    begin                : Wed Sep 13 2000
    copyright            : (C) 2000 by Halva Giovanni & Giacomo
    email                : invehalv@airlab.elet.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/



#ifndef rectangle_h
#define rectangle_h 1

#include "trapezium.h"

#ifdef DMALLOC

#include <dmalloc.h>

#endif


/**
* This class inherits from trapetium and specifies it to be a rectangle.  The get_membership_value, all the get and set methods are the same of trapezium.
* @see trapezium 
* @short Class implementing the concept of rectangle fuzzy set.
*/

class rectangle : public trapezium  //## Inherits: rectangle_inheritance%382BDE230244
{
 public:
  /**
   * Constructor generated by the UML software used to build Brian. It return an empty rectangle.
   */
  rectangle();

  /**
   * Copy constructor generated by the UML software used to build Brian. It return a copy of the fuzzy set passed.
   */  
  rectangle(const rectangle &right);

  /**	
   * Constructor that build a rectangle.
   * @param alabel is the label given to the the fuzzy set
   * @param ab is the first point of the fuzzy set
   * @param ac is the second point of the fuzzy set
   */
  rectangle (char* alabel, float ab, float ac);

  /**	
   * Destructor destroy a fuzzy set and free its data.
   */
  virtual ~rectangle(); 
};

#endif

