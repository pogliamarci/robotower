/***************************************************************************
                          association.h  -  description
                             -------------------
    begin                : Wed Sep 13 2000
    copyright            : (C) 2000 by Halva Giovanni & Giacomo
    email                : invehalv@airlab.elet.polimi.it
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef association_h
#define association_h 1

#include "shape.h"
#include <string.h>

#ifdef DMALLOC

#include <dmalloc.h>

#endif

/**
* Class that stores the association between crisp data and shape used to fuzzyfy them or between actions and shapes used to defuzzyfy them into commands.
* @short store the association between crisp and fuzzy data and viceversa.
*/

class association 
{
 public:
  /**
   * Constructor generated by the UML software used to build Brian. It return an empty association.
   */
  association();

  /**
   * Copy constructor generated by the UML software used to build Brian. It return a copy of the association.
   */
  association(const association &right);

  /*
   * Constructor that build an association between a crisp and a fuzzy data or viceversa.
   * @param alabel is the name of the data
   * @param ashape is the name of the shape
   */
  association(const char* alabel,const char* ashape);

  /**	
   * Destructor destroy an association
   */
  ~association();

   /**
    * Return the name of the data in the association
    * @return the name of the data
    */
  const char* get_label ();
  /**
   * Set the name of the data in the association
   * @param value is the new name for data
   */
  void set_label (const char* value);

  /**
   * Return the name of the shape in the association
   * @return the name of the data
   */
  const char* get_shape ();
  /**
   * Set the name of the shape in the association
   * @param value is the new name for the shape
   */
  void set_shape (const char* value);

 private:
  // Data Members for Class Attributes

  char* label;

  char* shape;
};

//## Get and Set Operations for Class Attributes (inline)
// Class association 

inline const char* association::get_label ()
{
  return label;
}

inline void association::set_label (const char* value)
{
  if (label!=NULL) free(label);
  label=(char *) malloc (strlen(value)+1);
  strcpy(label,value);
}

inline const char* association::get_shape ()
{
  return shape;
}

inline void association::set_shape (const char* value)
{
  if (label!=NULL) free(shape);
  shape=(char *) malloc (strlen(value)+1);
  strcpy(shape,value);
}


#endif
