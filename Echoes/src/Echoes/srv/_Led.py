"""autogenerated by genmsg_py from LedRequest.msg. Do not edit."""
import roslib.message
import struct


class LedRequest(roslib.message.Message):
  _md5sum = "616fbe05e64267fd9ee248014f1d1658"
  _type = "Echoes/LedRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool editGreen
bool editYellow
bool editRed
bool greenIsOn
uint8 redNumOn
bool[4] yellowIsOn

"""
  __slots__ = ['editGreen','editYellow','editRed','greenIsOn','redNumOn','yellowIsOn']
  _slot_types = ['bool','bool','bool','bool','uint8','bool[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       editGreen,editYellow,editRed,greenIsOn,redNumOn,yellowIsOn
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(LedRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.editGreen is None:
        self.editGreen = False
      if self.editYellow is None:
        self.editYellow = False
      if self.editRed is None:
        self.editRed = False
      if self.greenIsOn is None:
        self.greenIsOn = False
      if self.redNumOn is None:
        self.redNumOn = 0
      if self.yellowIsOn is None:
        self.yellowIsOn = [False,False,False,False]
    else:
      self.editGreen = False
      self.editYellow = False
      self.editRed = False
      self.greenIsOn = False
      self.redNumOn = 0
      self.yellowIsOn = [False,False,False,False]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.editGreen, _x.editYellow, _x.editRed, _x.greenIsOn, _x.redNumOn))
      buff.write(_struct_4B.pack(*self.yellowIsOn))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.editGreen, _x.editYellow, _x.editRed, _x.greenIsOn, _x.redNumOn,) = _struct_5B.unpack(str[start:end])
      self.editGreen = bool(self.editGreen)
      self.editYellow = bool(self.editYellow)
      self.editRed = bool(self.editRed)
      self.greenIsOn = bool(self.greenIsOn)
      start = end
      end += 4
      self.yellowIsOn = _struct_4B.unpack(str[start:end])
      self.yellowIsOn = map(bool, self.yellowIsOn)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.editGreen, _x.editYellow, _x.editRed, _x.greenIsOn, _x.redNumOn))
      buff.write(self.yellowIsOn.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.editGreen, _x.editYellow, _x.editRed, _x.greenIsOn, _x.redNumOn,) = _struct_5B.unpack(str[start:end])
      self.editGreen = bool(self.editGreen)
      self.editYellow = bool(self.editYellow)
      self.editRed = bool(self.editRed)
      self.greenIsOn = bool(self.greenIsOn)
      start = end
      end += 4
      self.yellowIsOn = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=4)
      self.yellowIsOn = map(bool, self.yellowIsOn)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4B = struct.Struct("<4B")
_struct_5B = struct.Struct("<5B")
"""autogenerated by genmsg_py from LedResponse.msg. Do not edit."""
import roslib.message
import struct


class LedResponse(roslib.message.Message):
  _md5sum = "6b6d4c3b5d9d236dae096b76debe50d5"
  _type = "Echoes/LedResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool requestSuccessful


"""
  __slots__ = ['requestSuccessful']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       requestSuccessful
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(LedResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.requestSuccessful is None:
        self.requestSuccessful = False
    else:
      self.requestSuccessful = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.requestSuccessful))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.requestSuccessful,) = _struct_B.unpack(str[start:end])
      self.requestSuccessful = bool(self.requestSuccessful)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.requestSuccessful))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.requestSuccessful,) = _struct_B.unpack(str[start:end])
      self.requestSuccessful = bool(self.requestSuccessful)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
class Led(roslib.message.ServiceDefinition):
  _type          = 'Echoes/Led'
  _md5sum = '123e812292460e49a24080052eae9c17'
  _request_class  = LedRequest
  _response_class = LedResponse
